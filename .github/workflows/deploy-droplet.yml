name: Deploy to Droplets

# ‚ö†Ô∏è IMPORTANT: This workflow requires GitHub Secrets to be configured
# Navigate to: Settings ‚Üí Secrets and variables ‚Üí Actions
# Required secrets:
#   - PRODUCTION_DROPLET_HOST (your production droplet IP)
#   - DEMO_DROPLET_HOST (your demo droplet IP)
#   - DROPLET_USER (SSH username, usually 'root')
#   - DROPLET_SSH_KEY (private SSH key for authentication)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - production
          - demo

jobs:
  deploy-production:
    name: Deploy to Production Droplet
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.inputs.target == 'production' || github.event.inputs.target == 'both' }}

    steps:
      - name: Deploy to Production via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd /opt/homeadmin24
            git pull origin main
            docker-compose -f docker-compose.yaml -f docker-compose.prod.yml build --no-cache
            docker-compose -f docker-compose.yaml -f docker-compose.prod.yml down
            docker-compose -f docker-compose.yaml -f docker-compose.prod.yml up -d
            sleep 15
            docker-compose exec -T web php bin/console doctrine:migrations:migrate --no-interaction
            docker-compose exec -T web php bin/console cache:clear
            docker-compose exec -T web php bin/console cache:warmup

      - name: Production Deployment Success
        if: success()
        run: echo "‚úÖ Deployment to PRODUCTION successful!"

      - name: Production Deployment Failed
        if: failure()
        run: echo "‚ùå Production deployment failed! Check logs."

  deploy-demo:
    name: Deploy to Demo Droplet
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.inputs.target == 'demo' || github.event.inputs.target == 'both' }}

    steps:
      - name: Deploy to Demo via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEMO_DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd /opt/homeadmin24-demo
            git pull origin main
            docker-compose -f docker-compose.yaml -f docker-compose.demo.yml build --no-cache
            docker-compose -f docker-compose.yaml -f docker-compose.demo.yml down
            docker volume rm homeadmin24-demo_mysql_data || true
            docker-compose -f docker-compose.yaml -f docker-compose.demo.yml up -d
            sleep 20
            docker-compose exec -T web php bin/console doctrine:migrations:migrate --no-interaction
            docker-compose exec -T web php bin/console doctrine:fixtures:load --group=system-config --no-interaction
            docker-compose exec -T web php bin/console doctrine:fixtures:load --group=demo-data --no-interaction
            docker-compose exec -T web php bin/console cache:clear

      - name: Demo Deployment Success
        if: success()
        run: echo "‚úÖ Deployment to DEMO successful! - Auto-resets every 30 min"

      - name: Demo Deployment Failed
        if: failure()
        run: echo "‚ùå Demo deployment failed! Check logs."

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-demo]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "=========================================="
          echo "homeadmin24 Multi-Droplet Deployment Complete"
          echo "=========================================="
          echo ""
          echo "üîí Production: Deployed successfully"
          echo "üéÆ Demo: Deployed successfully (auto-resets every 30 min)"
          echo "üåê Check your configured domains"
          echo ""
