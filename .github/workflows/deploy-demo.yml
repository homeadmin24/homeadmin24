name: Deploy to Demo

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      reset_data:
        description: 'Reset demo data (loads fresh fixtures)'
        required: false
        default: 'true'
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: demo

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH with keepalive
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Scan SSH host keys
          ssh-keyscan -H ${{ secrets.DEMO_DROPLET_HOST }} >> ~/.ssh/known_hosts 2>&1 || echo "Warning: ssh-keyscan failed, continuing anyway"

          # Configure SSH to keep connection alive during long builds
          cat > ~/.ssh/config << 'SSH_CONFIG'
          Host *
            ServerAliveInterval 30
            ServerAliveCountMax 120
            TCPKeepAlive yes
            StrictHostKeyChecking accept-new
          SSH_CONFIG

          chmod 600 ~/.ssh/config

      - name: Deploy to demo (using deploy script)
        env:
          RESET_DATA: ${{ github.event.inputs.reset_data || 'true' }}
        run: |
          # Run deployment script on server (handles build, migrations, fixtures)
          ssh -o ConnectTimeout=10 -o ServerAliveInterval=30 root@${{ secrets.DEMO_DROPLET_HOST }} \
            "cd /opt/homeadmin24-demo && \
             git pull origin main && \
             nohup bash .droplet/deploy-demo.sh ${{ secrets.DEMO_DOMAIN }} ${{ secrets.DEMO_EMAIL }} > /tmp/deploy.log 2>&1 &"

          # Wait for deployment to complete (check every 60 seconds, max 15 minutes)
          echo "Waiting for deployment to complete..."
          echo "Note: Server may be unresponsive during Docker build - this is normal"

          for i in {1..15}; do
            sleep 60

            # Try to check if containers are running (may fail during build)
            if ssh -o ConnectTimeout=10 -o ServerAliveInterval=10 -o BatchMode=yes root@${{ secrets.DEMO_DROPLET_HOST }} \
               "docker ps 2>/dev/null | grep -q homeadmin24-demo-web && docker ps | grep homeadmin24-demo-web | grep -q 'Up'" 2>/dev/null; then
              echo "‚úÖ Deployment complete - containers are running"
              break
            fi

            echo "‚è≥ Still deploying... ($((i*60))s / 900s elapsed)"

            if [ $i -eq 15 ]; then
              echo "‚ö†Ô∏è Deployment timeout - checking logs via direct web request instead"
            fi
          done

      - name: Health check
        run: |
          echo "Checking if demo site is accessible..."

          # Try up to 5 times with 30 second delays
          for attempt in {1..5}; do
            echo "Health check attempt $attempt/5..."

            if curl -f -s -o /dev/null -w "%{http_code}" https://demo.homeadmin24.de/login | grep -q "200"; then
              echo "‚úÖ Demo site is healthy and responding!"
              exit 0
            fi

            if [ $attempt -lt 5 ]; then
              echo "‚ùå Site not ready, waiting 30 seconds..."
              sleep 30
            fi
          done

          echo "‚ö†Ô∏è Site not responding after 5 attempts, but deployment may still be completing"
          echo "Check manually: https://demo.homeadmin24.de/login"
          exit 1

      - name: Deployment summary
        if: success()
        run: |
          echo "=========================================="
          echo "‚úÖ Demo Deployment Complete"
          echo "=========================================="
          echo ""
          echo "üéÆ Demo: https://demo.homeadmin24.de"
          echo "üìä Data reset: ${{ github.event.inputs.reset_data || 'true' }}"
          echo "üîÑ Auto-deploys on push to main"
          echo ""
